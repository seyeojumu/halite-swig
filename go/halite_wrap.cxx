/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: halite.i

#define SWIGMODULE halite
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "../halite.hpp"
#include "../networking/Networking.cpp"
#include "../core/Halite.cpp"


#include <string>


#include <vector>
#include <stdexcept>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< UniConnection >::const_reference std_vector_Sl_UniConnection_Sg__get(std::vector< UniConnection > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_UniConnection_Sg__set(std::vector< UniConnection > *self,int i,std::vector< UniConnection >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< hlt::Site >::const_reference std_vector_Sl_hlt_Site_Sg__get(std::vector< hlt::Site > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_hlt_Site_Sg__set(std::vector< hlt::Site > *self,int i,std::vector< hlt::Site >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< hlt::Site > >::const_reference std_vector_Sl_std_vector_Sl_hlt_Site_Sg__Sg__get(std::vector< std::vector< hlt::Site > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hlt_Site_Sg__Sg__set(std::vector< std::vector< hlt::Site > > *self,int i,std::vector< std::vector< hlt::Site > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< PlayerStatistics >::const_reference std_vector_Sl_PlayerStatistics_Sg__get(std::vector< PlayerStatistics > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_PlayerStatistics_Sg__set(std::vector< PlayerStatistics > *self,int i,std::vector< PlayerStatistics >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN unsigned char const &std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__get(std::map< hlt::Location,unsigned char > *self,hlt::Location const &key){
                std::map<hlt::Location,unsigned char >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__set(std::map< hlt::Location,unsigned char > *self,hlt::Location const &key,unsigned char const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__del(std::map< hlt::Location,unsigned char > *self,hlt::Location const &key){
                std::map<hlt::Location,unsigned char >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__has_key(std::map< hlt::Location,unsigned char > *self,hlt::Location const &key){
                std::map<hlt::Location,unsigned char >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::map< hlt::Location,unsigned char > >::const_reference std_vector_Sl_std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__Sg__get(std::vector< std::map< hlt::Location,unsigned char > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__Sg__set(std::vector< std::map< hlt::Location,unsigned char > > *self,int i,std::vector< std::map< hlt::Location,unsigned char > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

// C++ director class methods.
#include "halite_wrap.h"


#include <map>

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

SwigDirector_GameEndCallback::SwigDirector_GameEndCallback(int swig_p)
    : GameEndCallback(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_GameEndCallback_halite_47887523e5de5737(intgo);
SwigDirector_GameEndCallback::~SwigDirector_GameEndCallback()
{
  Swiggo_DeleteDirector_GameEndCallback_halite_47887523e5de5737(go_val);
  delete swig_mem;
}

extern "C" bool Swig_DirectorGameEndCallback_callback_run_halite_47887523e5de5737(int, intgo arg2, _gostring_ arg3);
bool SwigDirector_GameEndCallback::run(int turn, std::string board) {
  bool c_result;
  bool result;
  intgo swig_arg2;
  _gostring_ swig_arg3;
  
  swig_arg2 = (int)turn; 
  swig_arg3 = Swig_AllocateString((&board)->data(), (&board)->length()); 
  result = Swig_DirectorGameEndCallback_callback_run_halite_47887523e5de5737(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

SwigDirector_TimeoutCallback::SwigDirector_TimeoutCallback(int swig_p)
    : TimeoutCallback(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_TimeoutCallback_halite_47887523e5de5737(intgo);
SwigDirector_TimeoutCallback::~SwigDirector_TimeoutCallback()
{
  Swiggo_DeleteDirector_TimeoutCallback_halite_47887523e5de5737(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorTimeoutCallback_callback_run_halite_47887523e5de5737(int, intgo arg2, _gostring_ arg3);
void SwigDirector_TimeoutCallback::run(int playerTag, std::string playerName) {
  intgo swig_arg2;
  _gostring_ swig_arg3;
  
  swig_arg2 = (int)playerTag; 
  swig_arg3 = Swig_AllocateString((&playerName)->data(), (&playerName)->length()); 
  Swig_DirectorTimeoutCallback_callback_run_halite_47887523e5de5737(go_val, swig_arg2, swig_arg3);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_halite_47887523e5de5737(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_halite_47887523e5de5737(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_quiet_output_set_halite_47887523e5de5737(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  quiet_output = arg1;
  
}


bool _wrap_quiet_output_get_halite_47887523e5de5737() {
  bool result;
  bool _swig_go_result;
  
  
  result = (bool)quiet_output;
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Map *_wrap_randomMap_halite_47887523e5de5737(short _swig_go_0, short _swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  short arg1 ;
  short arg2 ;
  unsigned char arg3 ;
  unsigned int arg4 ;
  hlt::Map result;
  hlt::Map *_swig_go_result;
  
  arg1 = (short)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  arg3 = (unsigned char)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = randomMap(arg1,arg2,arg3,arg4);
  *(hlt::Map **)&_swig_go_result = new hlt::Map(result); 
  return _swig_go_result;
}


_gostring_ _wrap_randomMapString_halite_47887523e5de5737(short _swig_go_0, short _swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  short arg1 ;
  short arg2 ;
  unsigned char arg3 ;
  unsigned int arg4 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (short)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  arg3 = (unsigned char)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = randomMapString(arg1,arg2,arg3,arg4);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_randomSeed_halite_47887523e5de5737() {
  unsigned int result;
  intgo _swig_go_result;
  
  
  result = (unsigned int)randomSeed();
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Map *_wrap_blankMap_halite_47887523e5de5737(short _swig_go_0, short _swig_go_1) {
  short arg1 ;
  short arg2 ;
  hlt::Map result;
  hlt::Map *_swig_go_result;
  
  arg1 = (short)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  result = blankMap(arg1,arg2);
  *(hlt::Map **)&_swig_go_result = new hlt::Map(result); 
  return _swig_go_result;
}


GameStatistics *_wrap_wrappedRunGame_halite_47887523e5de5737(intgo _swig_go_0, short _swig_go_1, short _swig_go_2, intgo _swig_go_3, bool _swig_go_4, std::vector< UniConnection > *_swig_go_5, GameEndCallback *_swig_go_6) {
  unsigned int arg1 ;
  short arg2 ;
  short arg3 ;
  unsigned int arg4 ;
  bool arg5 ;
  std::vector< UniConnection > arg6 ;
  GameEndCallback *arg7 = (GameEndCallback *) 0 ;
  std::vector< UniConnection > *argp6 ;
  GameStatistics result;
  GameStatistics *_swig_go_result;
  
  arg1 = (unsigned int)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  arg3 = (short)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  argp6 = (std::vector< UniConnection > *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null std::vector< UniConnection >");
  }
  arg6 = (std::vector< UniConnection >)*argp6;
  
  arg7 = *(GameEndCallback **)&_swig_go_6; 
  
  result = runGame(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(GameStatistics **)&_swig_go_result = new GameStatistics(result); 
  return _swig_go_result;
}


void _wrap_wrappedUpdateMap_halite_47887523e5de5737(hlt::Map *_swig_go_0, std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_1) {
  hlt::Map *arg1 = 0 ;
  std::vector< std::map< hlt::Location,unsigned char > > *arg2 = 0 ;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  arg2 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_1; 
  
  updateMap(*arg1,(std::vector< std::map< hlt::Location,unsigned char > > const &)*arg2);
  
}


GameEndCallback *_wrap__swig_NewDirectorGameEndCallbackGameEndCallback_halite_47887523e5de5737(intgo _swig_go_0) {
  int arg1 ;
  GameEndCallback *result = 0 ;
  GameEndCallback *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_GameEndCallback(arg1);
  *(GameEndCallback **)&_swig_go_result = (GameEndCallback *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorGameEndCallback_halite_47887523e5de5737(GameEndCallback *_swig_go_0) {
  GameEndCallback *arg1 = (GameEndCallback *) 0 ;
  
  arg1 = *(GameEndCallback **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap__swig_DirectorGameEndCallback_upcall_Run_halite_47887523e5de5737(SwigDirector_GameEndCallback *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_GameEndCallback *arg1 = (SwigDirector_GameEndCallback *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_GameEndCallback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  result = (bool)arg1->_swig_upcall_run(arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_GameEndCallback_halite_47887523e5de5737(GameEndCallback *_swig_go_0) {
  GameEndCallback *arg1 = (GameEndCallback *) 0 ;
  
  arg1 = *(GameEndCallback **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_GameEndCallback_run_halite_47887523e5de5737(GameEndCallback *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  GameEndCallback *arg1 = (GameEndCallback *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(GameEndCallback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  result = (bool)(arg1)->run(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


GameEndCallback *_wrap_new_GameEndCallback_halite_47887523e5de5737() {
  GameEndCallback *result = 0 ;
  GameEndCallback *_swig_go_result;
  
  
  result = (GameEndCallback *)new GameEndCallback();
  *(GameEndCallback **)&_swig_go_result = (GameEndCallback *)result; 
  return _swig_go_result;
}


TimeoutCallback *_wrap__swig_NewDirectorTimeoutCallbackTimeoutCallback_halite_47887523e5de5737(intgo _swig_go_0) {
  int arg1 ;
  TimeoutCallback *result = 0 ;
  TimeoutCallback *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_TimeoutCallback(arg1);
  *(TimeoutCallback **)&_swig_go_result = (TimeoutCallback *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorTimeoutCallback_halite_47887523e5de5737(TimeoutCallback *_swig_go_0) {
  TimeoutCallback *arg1 = (TimeoutCallback *) 0 ;
  
  arg1 = *(TimeoutCallback **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorTimeoutCallback_upcall_Run_halite_47887523e5de5737(SwigDirector_TimeoutCallback *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  SwigDirector_TimeoutCallback *arg1 = (SwigDirector_TimeoutCallback *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  arg1 = *(SwigDirector_TimeoutCallback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  arg1->_swig_upcall_run(arg2, arg3);
  
}


void _wrap_delete_TimeoutCallback_halite_47887523e5de5737(TimeoutCallback *_swig_go_0) {
  TimeoutCallback *arg1 = (TimeoutCallback *) 0 ;
  
  arg1 = *(TimeoutCallback **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_TimeoutCallback_run_halite_47887523e5de5737(TimeoutCallback *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  TimeoutCallback *arg1 = (TimeoutCallback *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  arg1 = *(TimeoutCallback **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  (arg1)->run(arg2,arg3);
  
}


TimeoutCallback *_wrap_new_TimeoutCallback_halite_47887523e5de5737() {
  TimeoutCallback *result = 0 ;
  TimeoutCallback *_swig_go_result;
  
  
  result = (TimeoutCallback *)new TimeoutCallback();
  *(TimeoutCallback **)&_swig_go_result = (TimeoutCallback *)result; 
  return _swig_go_result;
}


void _wrap_Color_r_set_halite_47887523e5de5737(Color *_swig_go_0, float _swig_go_1) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = *(Color **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->r = arg2;
  
}


float _wrap_Color_r_get_halite_47887523e5de5737(Color *_swig_go_0) {
  Color *arg1 = (Color *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(Color **)&_swig_go_0; 
  
  result = (float) ((arg1)->r);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Color_g_set_halite_47887523e5de5737(Color *_swig_go_0, float _swig_go_1) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = *(Color **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->g = arg2;
  
}


float _wrap_Color_g_get_halite_47887523e5de5737(Color *_swig_go_0) {
  Color *arg1 = (Color *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(Color **)&_swig_go_0; 
  
  result = (float) ((arg1)->g);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Color_b_set_halite_47887523e5de5737(Color *_swig_go_0, float _swig_go_1) {
  Color *arg1 = (Color *) 0 ;
  float arg2 ;
  
  arg1 = *(Color **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->b = arg2;
  
}


float _wrap_Color_b_get_halite_47887523e5de5737(Color *_swig_go_0) {
  Color *arg1 = (Color *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(Color **)&_swig_go_0; 
  
  result = (float) ((arg1)->b);
  _swig_go_result = result; 
  return _swig_go_result;
}


Color *_wrap_new_Color_halite_47887523e5de5737() {
  Color *result = 0 ;
  Color *_swig_go_result;
  
  
  result = (Color *)new Color();
  *(Color **)&_swig_go_result = (Color *)result; 
  return _swig_go_result;
}


void _wrap_delete_Color_halite_47887523e5de5737(Color *_swig_go_0) {
  Color *arg1 = (Color *) 0 ;
  
  arg1 = *(Color **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_PlayerStatistics_tag_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, intgo _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->tag = arg2;
  
}


intgo _wrap_PlayerStatistics_tag_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (int) ((arg1)->tag);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_rank_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, intgo _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->rank = arg2;
  
}


intgo _wrap_PlayerStatistics_rank_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (int) ((arg1)->rank);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_averageTerritoryCount_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, double _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->average_territory_count = arg2;
  
}


double _wrap_PlayerStatistics_averageTerritoryCount_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (double) ((arg1)->average_territory_count);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_averageStrengthCount_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, double _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->average_strength_count = arg2;
  
}


double _wrap_PlayerStatistics_averageStrengthCount_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (double) ((arg1)->average_strength_count);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_averageProductionCount_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, double _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->average_production_count = arg2;
  
}


double _wrap_PlayerStatistics_averageProductionCount_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (double) ((arg1)->average_production_count);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_stillPercentage_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, double _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->still_percentage = arg2;
  
}


double _wrap_PlayerStatistics_stillPercentage_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (double) ((arg1)->still_percentage);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_initResponseTime_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, intgo _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->init_response_time = arg2;
  
}


intgo _wrap_PlayerStatistics_initResponseTime_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (int) ((arg1)->init_response_time);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatistics_averageFrameResponseTime_set_halite_47887523e5de5737(PlayerStatistics *_swig_go_0, double _swig_go_1) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double arg2 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  if (arg1) (arg1)->average_frame_response_time = arg2;
  
}


double _wrap_PlayerStatistics_averageFrameResponseTime_get_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  result = (double) ((arg1)->average_frame_response_time);
  _swig_go_result = result; 
  return _swig_go_result;
}


PlayerStatistics *_wrap_new_PlayerStatistics_halite_47887523e5de5737() {
  PlayerStatistics *result = 0 ;
  PlayerStatistics *_swig_go_result;
  
  
  result = (PlayerStatistics *)new PlayerStatistics();
  *(PlayerStatistics **)&_swig_go_result = (PlayerStatistics *)result; 
  return _swig_go_result;
}


void _wrap_delete_PlayerStatistics_halite_47887523e5de5737(PlayerStatistics *_swig_go_0) {
  PlayerStatistics *arg1 = (PlayerStatistics *) 0 ;
  
  arg1 = *(PlayerStatistics **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_GameStatistics_playerStatistics_set_halite_47887523e5de5737(GameStatistics *_swig_go_0, std::vector< PlayerStatistics > *_swig_go_1) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::vector< PlayerStatistics > *arg2 = (std::vector< PlayerStatistics > *) 0 ;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  arg2 = *(std::vector< PlayerStatistics > **)&_swig_go_1; 
  
  if (arg1) (arg1)->player_statistics = *arg2;
  
}


std::vector< PlayerStatistics > *_wrap_GameStatistics_playerStatistics_get_halite_47887523e5de5737(GameStatistics *_swig_go_0) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::vector< PlayerStatistics > *result = 0 ;
  std::vector< PlayerStatistics > *_swig_go_result;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  result = (std::vector< PlayerStatistics > *)& ((arg1)->player_statistics);
  *(std::vector< PlayerStatistics > **)&_swig_go_result = (std::vector< PlayerStatistics > *)result; 
  return _swig_go_result;
}


void _wrap_GameStatistics_outputFilename_set_halite_47887523e5de5737(GameStatistics *_swig_go_0, _gostring_ _swig_go_1) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->output_filename = *arg2;
  
}


_gostring_ _wrap_GameStatistics_outputFilename_get_halite_47887523e5de5737(GameStatistics *_swig_go_0) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->output_filename);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_GameStatistics_timeoutTags_set_halite_47887523e5de5737(GameStatistics *_swig_go_0, std::set< unsigned short > *_swig_go_1) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::set< unsigned short > arg2 ;
  std::set< unsigned short > *argp2 ;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  argp2 = (std::set< unsigned short > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::set< unsigned short >");
  }
  arg2 = (std::set< unsigned short >)*argp2;
  
  
  if (arg1) (arg1)->timeout_tags = arg2;
  
}


std::set< unsigned short > *_wrap_GameStatistics_timeoutTags_get_halite_47887523e5de5737(GameStatistics *_swig_go_0) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::set< unsigned short > result;
  std::set< unsigned short > *_swig_go_result;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  result =  ((arg1)->timeout_tags);
  *(std::set< unsigned short > **)&_swig_go_result = new std::set< unsigned short >(result); 
  return _swig_go_result;
}


void _wrap_GameStatistics_timeoutLogFilenames_set_halite_47887523e5de5737(GameStatistics *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  if (arg1) (arg1)->timeout_log_filenames = *arg2;
  
}


std::vector< std::string > *_wrap_GameStatistics_timeoutLogFilenames_get_halite_47887523e5de5737(GameStatistics *_swig_go_0) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)& ((arg1)->timeout_log_filenames);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


GameStatistics *_wrap_new_GameStatistics_halite_47887523e5de5737() {
  GameStatistics *result = 0 ;
  GameStatistics *_swig_go_result;
  
  
  result = (GameStatistics *)new GameStatistics();
  *(GameStatistics **)&_swig_go_result = (GameStatistics *)result; 
  return _swig_go_result;
}


void _wrap_delete_GameStatistics_halite_47887523e5de5737(GameStatistics *_swig_go_0) {
  GameStatistics *arg1 = (GameStatistics *) 0 ;
  
  arg1 = *(GameStatistics **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Location_x_set_halite_47887523e5de5737(hlt::Location *_swig_go_0, short _swig_go_1) {
  hlt::Location *arg1 = (hlt::Location *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


short _wrap_Location_x_get_halite_47887523e5de5737(hlt::Location *_swig_go_0) {
  hlt::Location *arg1 = (hlt::Location *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Location_y_set_halite_47887523e5de5737(hlt::Location *_swig_go_0, short _swig_go_1) {
  hlt::Location *arg1 = (hlt::Location *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


short _wrap_Location_y_get_halite_47887523e5de5737(hlt::Location *_swig_go_0) {
  hlt::Location *arg1 = (hlt::Location *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Location *_wrap_new_Location_halite_47887523e5de5737() {
  hlt::Location *result = 0 ;
  hlt::Location *_swig_go_result;
  
  
  result = (hlt::Location *)new hlt::Location();
  *(hlt::Location **)&_swig_go_result = (hlt::Location *)result; 
  return _swig_go_result;
}


void _wrap_delete_Location_halite_47887523e5de5737(hlt::Location *_swig_go_0) {
  hlt::Location *arg1 = (hlt::Location *) 0 ;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_LocationLess_halite_47887523e5de5737(hlt::Location *_swig_go_0, hlt::Location *_swig_go_1) {
  hlt::Location *arg1 = 0 ;
  hlt::Location *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  
  result = (bool)hlt::operator <((hlt::Location const &)*arg1,(hlt::Location const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_LocationEquals_halite_47887523e5de5737(hlt::Location *_swig_go_0, hlt::Location *_swig_go_1) {
  hlt::Location *arg1 = 0 ;
  hlt::Location *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(hlt::Location **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  
  result = (bool)hlt::operator ==((hlt::Location const &)*arg1,(hlt::Location const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Site_owner_set_halite_47887523e5de5737(hlt::Site *_swig_go_0, char _swig_go_1) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->owner = arg2;
  
}


char _wrap_Site_owner_get_halite_47887523e5de5737(hlt::Site *_swig_go_0) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->owner);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Site_strength_set_halite_47887523e5de5737(hlt::Site *_swig_go_0, char _swig_go_1) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->strength = arg2;
  
}


char _wrap_Site_strength_get_halite_47887523e5de5737(hlt::Site *_swig_go_0) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->strength);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Site_production_set_halite_47887523e5de5737(hlt::Site *_swig_go_0, char _swig_go_1) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  if (arg1) (arg1)->production = arg2;
  
}


char _wrap_Site_production_get_halite_47887523e5de5737(hlt::Site *_swig_go_0) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  unsigned char result;
  char _swig_go_result;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  
  result = (unsigned char) ((arg1)->production);
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Site *_wrap_new_Site_halite_47887523e5de5737() {
  hlt::Site *result = 0 ;
  hlt::Site *_swig_go_result;
  
  
  result = (hlt::Site *)new hlt::Site();
  *(hlt::Site **)&_swig_go_result = (hlt::Site *)result; 
  return _swig_go_result;
}


void _wrap_delete_Site_halite_47887523e5de5737(hlt::Site *_swig_go_0) {
  hlt::Site *arg1 = (hlt::Site *) 0 ;
  
  arg1 = *(hlt::Site **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Map_contents_set_halite_47887523e5de5737(hlt::Map *_swig_go_0, std::vector< std::vector< hlt::Site > > *_swig_go_1) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  std::vector< std::vector< hlt::Site > > *arg2 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_1; 
  
  if (arg1) (arg1)->contents = *arg2;
  
}


std::vector< std::vector< hlt::Site > > *_wrap_Map_contents_get_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  std::vector< std::vector< hlt::Site > > *result = 0 ;
  std::vector< std::vector< hlt::Site > > *_swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  result = (std::vector< std::vector< hlt::Site > > *)& ((arg1)->contents);
  *(std::vector< std::vector< hlt::Site > > **)&_swig_go_result = (std::vector< std::vector< hlt::Site > > *)result; 
  return _swig_go_result;
}


void _wrap_Map_width_set_halite_47887523e5de5737(hlt::Map *_swig_go_0, short _swig_go_1) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->map_width = arg2;
  
}


short _wrap_Map_width_get_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->map_width);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_height_set_halite_47887523e5de5737(hlt::Map *_swig_go_0, short _swig_go_1) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  unsigned short arg2 ;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  arg2 = (unsigned short)_swig_go_1; 
  
  if (arg1) (arg1)->map_height = arg2;
  
}


short _wrap_Map_height_get_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  unsigned short result;
  short _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  result = (unsigned short) ((arg1)->map_height);
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Map *_wrap_new_Map__SWIG_0_halite_47887523e5de5737() {
  hlt::Map *result = 0 ;
  hlt::Map *_swig_go_result;
  
  
  result = (hlt::Map *)new hlt::Map();
  *(hlt::Map **)&_swig_go_result = (hlt::Map *)result; 
  return _swig_go_result;
}


hlt::Map *_wrap_new_Map__SWIG_1_halite_47887523e5de5737(short _swig_go_0, short _swig_go_1) {
  short arg1 ;
  short arg2 ;
  hlt::Map *result = 0 ;
  hlt::Map *_swig_go_result;
  
  arg1 = (short)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  
  result = (hlt::Map *)new hlt::Map(arg1,arg2);
  *(hlt::Map **)&_swig_go_result = (hlt::Map *)result; 
  return _swig_go_result;
}


hlt::Map *_wrap_new_Map__SWIG_2_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = 0 ;
  hlt::Map *result = 0 ;
  hlt::Map *_swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  result = (hlt::Map *)new hlt::Map((hlt::Map const &)*arg1);
  *(hlt::Map **)&_swig_go_result = (hlt::Map *)result; 
  return _swig_go_result;
}


hlt::Map *_wrap_new_Map__SWIG_3_halite_47887523e5de5737(short _swig_go_0, short _swig_go_1, char _swig_go_2, intgo _swig_go_3) {
  short arg1 ;
  short arg2 ;
  unsigned char arg3 ;
  unsigned int arg4 ;
  hlt::Map *result = 0 ;
  hlt::Map *_swig_go_result;
  
  arg1 = (short)_swig_go_0; 
  arg2 = (short)_swig_go_1; 
  arg3 = (unsigned char)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (hlt::Map *)new hlt::Map(arg1,arg2,arg3,arg4);
  *(hlt::Map **)&_swig_go_result = (hlt::Map *)result; 
  return _swig_go_result;
}


bool _wrap_Map_inBounds_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  hlt::Location *argp2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  
  result = (bool)((hlt::Map const *)arg1)->inBounds(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_Map_getDistance_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1, hlt::Location *_swig_go_2) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  hlt::Location arg3 ;
  hlt::Location *argp2 ;
  hlt::Location *argp3 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  
  argp3 = (hlt::Location *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg3 = (hlt::Location)*argp3;
  
  
  result = (float)((hlt::Map const *)arg1)->getDistance(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


float _wrap_Map_getAngle_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1, hlt::Location *_swig_go_2) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  hlt::Location arg3 ;
  hlt::Location *argp2 ;
  hlt::Location *argp3 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  
  argp3 = (hlt::Location *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg3 = (hlt::Location)*argp3;
  
  
  result = (float)((hlt::Map const *)arg1)->getAngle(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


hlt::Location *_wrap_Map_getLocation_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1, char _swig_go_2) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  unsigned char arg3 ;
  hlt::Location *argp2 ;
  hlt::Location result;
  hlt::Location *_swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  arg3 = (unsigned char)_swig_go_2; 
  
  result = ((hlt::Map const *)arg1)->getLocation(arg2,arg3);
  *(hlt::Location **)&_swig_go_result = new hlt::Location(result); 
  return _swig_go_result;
}


hlt::Site *_wrap_Map_getSite__SWIG_0_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1, char _swig_go_2) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  unsigned char arg3 ;
  hlt::Location *argp2 ;
  hlt::Site *result = 0 ;
  hlt::Site *_swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  arg3 = (unsigned char)_swig_go_2; 
  
  result = (hlt::Site *) &(arg1)->getSite(arg2,arg3);
  *(hlt::Site **)&_swig_go_result = result; 
  return _swig_go_result;
}


hlt::Site *_wrap_Map_getSite__SWIG_1_halite_47887523e5de5737(hlt::Map *_swig_go_0, hlt::Location *_swig_go_1) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  hlt::Location arg2 ;
  hlt::Location *argp2 ;
  hlt::Site *result = 0 ;
  hlt::Site *_swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  argp2 = (hlt::Location *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null hlt::Location");
  }
  arg2 = (hlt::Location)*argp2;
  
  
  result = (hlt::Site *) &(arg1)->getSite(arg2);
  *(hlt::Site **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Map_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = (hlt::Map *) 0 ;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  delete arg1;
  
}


hlt::Map *_wrap_ppmToMap_halite_47887523e5de5737(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string arg1 ;
  int arg2 ;
  hlt::Map result;
  hlt::Map *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  arg2 = (int)_swig_go_1; 
  
  result = hlt::ppmToMap(arg1,arg2);
  *(hlt::Map **)&_swig_go_result = new hlt::Map(result); 
  return _swig_go_result;
}


void _wrap_UniConnection_read_set_halite_47887523e5de5737(UniConnection *_swig_go_0, intgo _swig_go_1) {
  UniConnection *arg1 = (UniConnection *) 0 ;
  int arg2 ;
  
  arg1 = *(UniConnection **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->read = arg2;
  
}


intgo _wrap_UniConnection_read_get_halite_47887523e5de5737(UniConnection *_swig_go_0) {
  UniConnection *arg1 = (UniConnection *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(UniConnection **)&_swig_go_0; 
  
  result = (int) ((arg1)->read);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UniConnection_write_set_halite_47887523e5de5737(UniConnection *_swig_go_0, intgo _swig_go_1) {
  UniConnection *arg1 = (UniConnection *) 0 ;
  int arg2 ;
  
  arg1 = *(UniConnection **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->write = arg2;
  
}


intgo _wrap_UniConnection_write_get_halite_47887523e5de5737(UniConnection *_swig_go_0) {
  UniConnection *arg1 = (UniConnection *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(UniConnection **)&_swig_go_0; 
  
  result = (int) ((arg1)->write);
  _swig_go_result = result; 
  return _swig_go_result;
}


UniConnection *_wrap_new_UniConnection_halite_47887523e5de5737() {
  UniConnection *result = 0 ;
  UniConnection *_swig_go_result;
  
  
  result = (UniConnection *)new UniConnection();
  *(UniConnection **)&_swig_go_result = (UniConnection *)result; 
  return _swig_go_result;
}


void _wrap_delete_UniConnection_halite_47887523e5de5737(UniConnection *_swig_go_0) {
  UniConnection *arg1 = (UniConnection *) 0 ;
  
  arg1 = *(UniConnection **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Networking_startAndConnectBot_halite_47887523e5de5737(Networking *_swig_go_0, _gostring_ _swig_go_1) {
  Networking *arg1 = (Networking *) 0 ;
  std::string arg2 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  (arg1)->startAndConnectBot(arg2);
  
}


intgo _wrap_Networking_handleInitNetworking_halite_47887523e5de5737(Networking *_swig_go_0, char _swig_go_1, hlt::Map *_swig_go_2, bool _swig_go_3, _gostring_* _swig_go_4) {
  Networking *arg1 = (Networking *) 0 ;
  unsigned char arg2 ;
  hlt::Map *arg3 = 0 ;
  bool arg4 ;
  std::string *arg5 = (std::string *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Networking **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  arg3 = *(hlt::Map **)&_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = *(std::string **)&_swig_go_4; 
  
  result = (int)(arg1)->handleInitNetworking(arg2,(hlt::Map const &)*arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Networking_handleFrameNetworking_halite_47887523e5de5737(Networking *_swig_go_0, char _swig_go_1, short _swig_go_2, hlt::Map *_swig_go_3, bool _swig_go_4, std::map< hlt::Location,unsigned char > *_swig_go_5) {
  Networking *arg1 = (Networking *) 0 ;
  unsigned char arg2 ;
  unsigned short *arg3 = 0 ;
  hlt::Map *arg4 = 0 ;
  bool arg5 ;
  std::map< hlt::Location,unsigned char > *arg6 = (std::map< hlt::Location,unsigned char > *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Networking **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  arg3 = (unsigned short *)&_swig_go_2; 
  arg4 = *(hlt::Map **)&_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  arg6 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_5; 
  
  result = (int)(arg1)->handleFrameNetworking(arg2,(unsigned short const &)*arg3,(hlt::Map const &)*arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Networking_killPlayer_halite_47887523e5de5737(Networking *_swig_go_0, char _swig_go_1) {
  Networking *arg1 = (Networking *) 0 ;
  unsigned char arg2 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  (arg1)->killPlayer(arg2);
  
}


bool _wrap_Networking_isProcessDead_halite_47887523e5de5737(Networking *_swig_go_0, char _swig_go_1) {
  Networking *arg1 = (Networking *) 0 ;
  unsigned char arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Networking **)&_swig_go_0; 
  arg2 = (unsigned char)_swig_go_1; 
  
  result = (bool)(arg1)->isProcessDead(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Networking_numberOfPlayers_halite_47887523e5de5737(Networking *_swig_go_0) {
  Networking *arg1 = (Networking *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Networking **)&_swig_go_0; 
  
  result = (int)(arg1)->numberOfPlayers();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Networking_player_logs_set_halite_47887523e5de5737(Networking *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  Networking *arg1 = (Networking *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  if (arg1) (arg1)->player_logs = *arg2;
  
}


std::vector< std::string > *_wrap_Networking_player_logs_get_halite_47887523e5de5737(Networking *_swig_go_0) {
  Networking *arg1 = (Networking *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(Networking **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)& ((arg1)->player_logs);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Networking_serializeMap_halite_47887523e5de5737(hlt::Map *_swig_go_0) {
  hlt::Map *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(hlt::Map **)&_swig_go_0; 
  
  result = Networking::serializeMap((hlt::Map const &)*arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_Networking_addLocalBot_halite_47887523e5de5737(Networking *_swig_go_0, UniConnection *_swig_go_1) {
  Networking *arg1 = (Networking *) 0 ;
  UniConnection arg2 ;
  UniConnection *argp2 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  
  argp2 = (UniConnection *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null UniConnection");
  }
  arg2 = (UniConnection)*argp2;
  
  
  (arg1)->addLocalBot(arg2);
  
}


void _wrap_Networking_stopManagingProcesses_halite_47887523e5de5737(Networking *_swig_go_0) {
  Networking *arg1 = (Networking *) 0 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  
  (arg1)->stopManagingProcesses();
  
}


Networking *_wrap_new_Networking_halite_47887523e5de5737() {
  Networking *result = 0 ;
  Networking *_swig_go_result;
  
  
  result = (Networking *)new Networking();
  *(Networking **)&_swig_go_result = (Networking *)result; 
  return _swig_go_result;
}


void _wrap_delete_Networking_halite_47887523e5de5737(Networking *_swig_go_0) {
  Networking *arg1 = (Networking *) 0 ;
  
  arg1 = *(Networking **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< UniConnection > *_wrap_new_UniConnectionVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< UniConnection > *result = 0 ;
  std::vector< UniConnection > *_swig_go_result;
  
  
  result = (std::vector< UniConnection > *)new std::vector< UniConnection >();
  *(std::vector< UniConnection > **)&_swig_go_result = (std::vector< UniConnection > *)result; 
  return _swig_go_result;
}


std::vector< UniConnection > *_wrap_new_UniConnectionVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< UniConnection >::size_type arg1 ;
  std::vector< UniConnection > *result = 0 ;
  std::vector< UniConnection > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< UniConnection > *)new std::vector< UniConnection >(arg1);
  *(std::vector< UniConnection > **)&_swig_go_result = (std::vector< UniConnection > *)result; 
  return _swig_go_result;
}


long long _wrap_UniConnectionVector_size_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  std::vector< UniConnection >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  
  result = ((std::vector< UniConnection > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_UniConnectionVector_capacity_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  std::vector< UniConnection >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  
  result = ((std::vector< UniConnection > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UniConnectionVector_reserve_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0, long long _swig_go_1) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  std::vector< UniConnection >::size_type arg2 ;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_UniConnectionVector_isEmpty_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  
  result = (bool)((std::vector< UniConnection > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UniConnectionVector_clear_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_UniConnectionVector_add_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0, UniConnection *_swig_go_1) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  std::vector< UniConnection >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  arg2 = *(std::vector< UniConnection >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< UniConnection >::value_type const &)*arg2);
  
}


UniConnection *_wrap_UniConnectionVector_get_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0, intgo _swig_go_1) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  int arg2 ;
  std::vector< UniConnection >::value_type *result = 0 ;
  UniConnection *_swig_go_result;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< UniConnection >::value_type *) &std_vector_Sl_UniConnection_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  *(std::vector< UniConnection >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_UniConnectionVector_set_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0, intgo _swig_go_1, UniConnection *_swig_go_2) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  int arg2 ;
  std::vector< UniConnection >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< UniConnection >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_UniConnection_Sg__set(arg1,arg2,(UniConnection const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_UniConnectionVector_halite_47887523e5de5737(std::vector< UniConnection > *_swig_go_0) {
  std::vector< UniConnection > *arg1 = (std::vector< UniConnection > *) 0 ;
  
  arg1 = *(std::vector< UniConnection > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< hlt::Site > *_wrap_new_RowVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< hlt::Site > *result = 0 ;
  std::vector< hlt::Site > *_swig_go_result;
  
  
  result = (std::vector< hlt::Site > *)new std::vector< hlt::Site >();
  *(std::vector< hlt::Site > **)&_swig_go_result = (std::vector< hlt::Site > *)result; 
  return _swig_go_result;
}


std::vector< hlt::Site > *_wrap_new_RowVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< hlt::Site >::size_type arg1 ;
  std::vector< hlt::Site > *result = 0 ;
  std::vector< hlt::Site > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< hlt::Site > *)new std::vector< hlt::Site >(arg1);
  *(std::vector< hlt::Site > **)&_swig_go_result = (std::vector< hlt::Site > *)result; 
  return _swig_go_result;
}


long long _wrap_RowVector_size_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  std::vector< hlt::Site >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  
  result = ((std::vector< hlt::Site > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_RowVector_capacity_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  std::vector< hlt::Site >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  
  result = ((std::vector< hlt::Site > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RowVector_reserve_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0, long long _swig_go_1) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  std::vector< hlt::Site >::size_type arg2 ;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_RowVector_isEmpty_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  
  result = (bool)((std::vector< hlt::Site > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RowVector_clear_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_RowVector_add_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0, hlt::Site *_swig_go_1) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  std::vector< hlt::Site >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  arg2 = *(std::vector< hlt::Site >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< hlt::Site >::value_type const &)*arg2);
  
}


hlt::Site *_wrap_RowVector_get_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0, intgo _swig_go_1) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  int arg2 ;
  std::vector< hlt::Site >::value_type *result = 0 ;
  hlt::Site *_swig_go_result;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< hlt::Site >::value_type *) &std_vector_Sl_hlt_Site_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  *(std::vector< hlt::Site >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RowVector_set_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0, intgo _swig_go_1, hlt::Site *_swig_go_2) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  int arg2 ;
  std::vector< hlt::Site >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< hlt::Site >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_hlt_Site_Sg__set(arg1,arg2,(hlt::Site const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_RowVector_halite_47887523e5de5737(std::vector< hlt::Site > *_swig_go_0) {
  std::vector< hlt::Site > *arg1 = (std::vector< hlt::Site > *) 0 ;
  
  arg1 = *(std::vector< hlt::Site > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::vector< hlt::Site > > *_wrap_new_BoardVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< std::vector< hlt::Site > > *result = 0 ;
  std::vector< std::vector< hlt::Site > > *_swig_go_result;
  
  
  result = (std::vector< std::vector< hlt::Site > > *)new std::vector< std::vector< hlt::Site > >();
  *(std::vector< std::vector< hlt::Site > > **)&_swig_go_result = (std::vector< std::vector< hlt::Site > > *)result; 
  return _swig_go_result;
}


std::vector< std::vector< hlt::Site > > *_wrap_new_BoardVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< std::vector< hlt::Site > >::size_type arg1 ;
  std::vector< std::vector< hlt::Site > > *result = 0 ;
  std::vector< std::vector< hlt::Site > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::vector< hlt::Site > > *)new std::vector< std::vector< hlt::Site > >(arg1);
  *(std::vector< std::vector< hlt::Site > > **)&_swig_go_result = (std::vector< std::vector< hlt::Site > > *)result; 
  return _swig_go_result;
}


long long _wrap_BoardVector_size_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  std::vector< std::vector< hlt::Site > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< hlt::Site > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_BoardVector_capacity_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  std::vector< std::vector< hlt::Site > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  
  result = ((std::vector< std::vector< hlt::Site > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BoardVector_reserve_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  std::vector< std::vector< hlt::Site > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_BoardVector_isEmpty_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::vector< hlt::Site > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BoardVector_clear_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_BoardVector_add_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0, std::vector< hlt::Site > *_swig_go_1) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  std::vector< std::vector< hlt::Site > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< hlt::Site > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::vector< hlt::Site > >::value_type const &)*arg2);
  
}


std::vector< hlt::Site > *_wrap_BoardVector_get_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< hlt::Site > >::value_type *result = 0 ;
  std::vector< hlt::Site > *_swig_go_result;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::vector< hlt::Site > >::value_type *) &std_vector_Sl_std_vector_Sl_hlt_Site_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  *(std::vector< std::vector< hlt::Site > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_BoardVector_set_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0, intgo _swig_go_1, std::vector< hlt::Site > *_swig_go_2) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< hlt::Site > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::vector< hlt::Site > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_vector_Sl_hlt_Site_Sg__Sg__set(arg1,arg2,(std::vector< hlt::Site > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_BoardVector_halite_47887523e5de5737(std::vector< std::vector< hlt::Site > > *_swig_go_0) {
  std::vector< std::vector< hlt::Site > > *arg1 = (std::vector< std::vector< hlt::Site > > *) 0 ;
  
  arg1 = *(std::vector< std::vector< hlt::Site > > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< PlayerStatistics > *_wrap_new_PlayerStatisticsVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< PlayerStatistics > *result = 0 ;
  std::vector< PlayerStatistics > *_swig_go_result;
  
  
  result = (std::vector< PlayerStatistics > *)new std::vector< PlayerStatistics >();
  *(std::vector< PlayerStatistics > **)&_swig_go_result = (std::vector< PlayerStatistics > *)result; 
  return _swig_go_result;
}


std::vector< PlayerStatistics > *_wrap_new_PlayerStatisticsVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< PlayerStatistics >::size_type arg1 ;
  std::vector< PlayerStatistics > *result = 0 ;
  std::vector< PlayerStatistics > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< PlayerStatistics > *)new std::vector< PlayerStatistics >(arg1);
  *(std::vector< PlayerStatistics > **)&_swig_go_result = (std::vector< PlayerStatistics > *)result; 
  return _swig_go_result;
}


long long _wrap_PlayerStatisticsVector_size_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  std::vector< PlayerStatistics >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  
  result = ((std::vector< PlayerStatistics > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PlayerStatisticsVector_capacity_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  std::vector< PlayerStatistics >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  
  result = ((std::vector< PlayerStatistics > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatisticsVector_reserve_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0, long long _swig_go_1) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  std::vector< PlayerStatistics >::size_type arg2 ;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_PlayerStatisticsVector_isEmpty_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  
  result = (bool)((std::vector< PlayerStatistics > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatisticsVector_clear_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_PlayerStatisticsVector_add_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0, PlayerStatistics *_swig_go_1) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  std::vector< PlayerStatistics >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  arg2 = *(std::vector< PlayerStatistics >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< PlayerStatistics >::value_type const &)*arg2);
  
}


PlayerStatistics *_wrap_PlayerStatisticsVector_get_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0, intgo _swig_go_1) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  int arg2 ;
  std::vector< PlayerStatistics >::value_type *result = 0 ;
  PlayerStatistics *_swig_go_result;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< PlayerStatistics >::value_type *) &std_vector_Sl_PlayerStatistics_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  *(std::vector< PlayerStatistics >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerStatisticsVector_set_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0, intgo _swig_go_1, PlayerStatistics *_swig_go_2) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  int arg2 ;
  std::vector< PlayerStatistics >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< PlayerStatistics >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_PlayerStatistics_Sg__set(arg1,arg2,(PlayerStatistics const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_PlayerStatisticsVector_halite_47887523e5de5737(std::vector< PlayerStatistics > *_swig_go_0) {
  std::vector< PlayerStatistics > *arg1 = (std::vector< PlayerStatistics > *) 0 ;
  
  arg1 = *(std::vector< PlayerStatistics > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_StringVector_size_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_StringVector_capacity_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_reserve_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_StringVector_isEmpty_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_clear_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_StringVector_add_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_StringVector_get_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_StringVector_set_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_StringVector_halite_47887523e5de5737(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::map< hlt::Location,unsigned char > *_wrap_new_LocationToMoveMap__SWIG_0_halite_47887523e5de5737() {
  std::map< hlt::Location,unsigned char > *result = 0 ;
  std::map< hlt::Location,unsigned char > *_swig_go_result;
  
  
  result = (std::map< hlt::Location,unsigned char > *)new std::map< hlt::Location,unsigned char >();
  *(std::map< hlt::Location,unsigned char > **)&_swig_go_result = (std::map< hlt::Location,unsigned char > *)result; 
  return _swig_go_result;
}


std::map< hlt::Location,unsigned char > *_wrap_new_LocationToMoveMap__SWIG_1_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0) {
  std::map< hlt::Location,unsigned char > *arg1 = 0 ;
  std::map< hlt::Location,unsigned char > *result = 0 ;
  std::map< hlt::Location,unsigned char > *_swig_go_result;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  
  result = (std::map< hlt::Location,unsigned char > *)new std::map< hlt::Location,unsigned char >((std::map< hlt::Location,unsigned char > const &)*arg1);
  *(std::map< hlt::Location,unsigned char > **)&_swig_go_result = (std::map< hlt::Location,unsigned char > *)result; 
  return _swig_go_result;
}


intgo _wrap_LocationToMoveMap_size_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  
  result = (unsigned int)((std::map< hlt::Location,unsigned char > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_LocationToMoveMap_empty_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  
  result = (bool)((std::map< hlt::Location,unsigned char > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LocationToMoveMap_clear_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


char _wrap_LocationToMoveMap_get_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0, hlt::Location *_swig_go_1) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  hlt::Location *arg2 = 0 ;
  unsigned char *result = 0 ;
  char _swig_go_result;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  
  try {
    result = (unsigned char *) &std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__get(arg1,(hlt::Location const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  _swig_go_result = (unsigned char)*result; 
  return _swig_go_result;
}


void _wrap_LocationToMoveMap_set_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0, hlt::Location *_swig_go_1, char _swig_go_2) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  hlt::Location *arg2 = 0 ;
  unsigned char *arg3 = 0 ;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  arg3 = (unsigned char *)&_swig_go_2; 
  
  std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__set(arg1,(hlt::Location const &)*arg2,(unsigned char const &)*arg3);
  
}


void _wrap_LocationToMoveMap_del_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0, hlt::Location *_swig_go_1) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  hlt::Location *arg2 = 0 ;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  
  try {
    std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__del(arg1,(hlt::Location const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


bool _wrap_LocationToMoveMap_has_key_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0, hlt::Location *_swig_go_1) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  hlt::Location *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  arg2 = *(hlt::Location **)&_swig_go_1; 
  
  result = (bool)std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__has_key(arg1,(hlt::Location const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_LocationToMoveMap_halite_47887523e5de5737(std::map< hlt::Location,unsigned char > *_swig_go_0) {
  std::map< hlt::Location,unsigned char > *arg1 = (std::map< hlt::Location,unsigned char > *) 0 ;
  
  arg1 = *(std::map< hlt::Location,unsigned char > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::map< hlt::Location,unsigned char > > *_wrap_new_PlayerMovesVector__SWIG_0_halite_47887523e5de5737() {
  std::vector< std::map< hlt::Location,unsigned char > > *result = 0 ;
  std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_result;
  
  
  result = (std::vector< std::map< hlt::Location,unsigned char > > *)new std::vector< std::map< hlt::Location,unsigned char > >();
  *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_result = (std::vector< std::map< hlt::Location,unsigned char > > *)result; 
  return _swig_go_result;
}


std::vector< std::map< hlt::Location,unsigned char > > *_wrap_new_PlayerMovesVector__SWIG_1_halite_47887523e5de5737(long long _swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > >::size_type arg1 ;
  std::vector< std::map< hlt::Location,unsigned char > > *result = 0 ;
  std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::map< hlt::Location,unsigned char > > *)new std::vector< std::map< hlt::Location,unsigned char > >(arg1);
  *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_result = (std::vector< std::map< hlt::Location,unsigned char > > *)result; 
  return _swig_go_result;
}


long long _wrap_PlayerMovesVector_size_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  std::vector< std::map< hlt::Location,unsigned char > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  
  result = ((std::vector< std::map< hlt::Location,unsigned char > > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PlayerMovesVector_capacity_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  std::vector< std::map< hlt::Location,unsigned char > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  
  result = ((std::vector< std::map< hlt::Location,unsigned char > > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerMovesVector_reserve_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  std::vector< std::map< hlt::Location,unsigned char > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_PlayerMovesVector_isEmpty_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::map< hlt::Location,unsigned char > > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerMovesVector_clear_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_PlayerMovesVector_add_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0, std::map< hlt::Location,unsigned char > *_swig_go_1) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  std::vector< std::map< hlt::Location,unsigned char > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::map< hlt::Location,unsigned char > >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< std::map< hlt::Location,unsigned char > >::value_type const &)*arg2);
  
}


std::map< hlt::Location,unsigned char > *_wrap_PlayerMovesVector_get_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< std::map< hlt::Location,unsigned char > >::value_type *result = 0 ;
  std::map< hlt::Location,unsigned char > *_swig_go_result;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::map< hlt::Location,unsigned char > >::value_type *) &std_vector_Sl_std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  *(std::vector< std::map< hlt::Location,unsigned char > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PlayerMovesVector_set_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0, intgo _swig_go_1, std::map< hlt::Location,unsigned char > *_swig_go_2) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  int arg2 ;
  std::vector< std::map< hlt::Location,unsigned char > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::map< hlt::Location,unsigned char > >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_std_map_Sl_hlt_Location_Sc_unsigned_SS_char_Sg__Sg__set(arg1,arg2,(std::map< hlt::Location,unsigned char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void _wrap_delete_PlayerMovesVector_halite_47887523e5de5737(std::vector< std::map< hlt::Location,unsigned char > > *_swig_go_0) {
  std::vector< std::map< hlt::Location,unsigned char > > *arg1 = (std::vector< std::map< hlt::Location,unsigned char > > *) 0 ;
  
  arg1 = *(std::vector< std::map< hlt::Location,unsigned char > > **)&_swig_go_0; 
  
  delete arg1;
  
}


#ifdef __cplusplus
}
#endif

