/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: halite.i

#ifndef SWIG_halite_WRAP_H_
#define SWIG_halite_WRAP_H_

class Swig_memory;

class SwigDirector_GameEndCallback : public GameEndCallback
{
 public:
  SwigDirector_GameEndCallback(int swig_p);
  virtual ~SwigDirector_GameEndCallback();
  bool _swig_upcall_run(int turn, std::string board) {
    return GameEndCallback::run(turn,board);
  }
  virtual bool run(int turn, std::string board);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

class SwigDirector_TimeoutCallback : public TimeoutCallback
{
 public:
  SwigDirector_TimeoutCallback(int swig_p);
  virtual ~SwigDirector_TimeoutCallback();
  void _swig_upcall_run(int playerTag, std::string playerName) {
    TimeoutCallback::run(playerTag,playerName);
  }
  virtual void run(int playerTag, std::string playerName);
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

#endif
