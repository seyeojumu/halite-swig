# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_halite')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_halite')
    _halite = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_halite', [dirname(__file__)])
        except ImportError:
            import _halite
            return _halite
        if fp is not None:
            try:
                _mod = imp.load_module('_halite', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _halite = swig_import_helper()
    del swig_import_helper
else:
    import _halite
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _halite.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _halite.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _halite.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _halite.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _halite.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _halite.SwigPyIterator_equal(self, x)

    def copy(self):
        return _halite.SwigPyIterator_copy(self)

    def next(self):
        return _halite.SwigPyIterator_next(self)

    def __next__(self):
        return _halite.SwigPyIterator___next__(self)

    def previous(self):
        return _halite.SwigPyIterator_previous(self)

    def advance(self, n):
        return _halite.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _halite.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _halite.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _halite.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _halite.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _halite.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _halite.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _halite.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def randomMap(width, height, numberOfPlayers, seed):
    return _halite.randomMap(width, height, numberOfPlayers, seed)
randomMap = _halite.randomMap

def rawRunGame(id, width, height, seed, ignore_timeout, connections, callback):
    return _halite.rawRunGame(id, width, height, seed, ignore_timeout, connections, callback)
rawRunGame = _halite.rawRunGame
class GameEndCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameEndCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameEndCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _halite.delete_GameEndCallback
    __del__ = lambda self: None

    def run(self, turn, board):
        return _halite.GameEndCallback_run(self, turn, board)

    def __init__(self):
        if self.__class__ == GameEndCallback:
            _self = None
        else:
            _self = self
        this = _halite.new_GameEndCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _halite.disown_GameEndCallback(self)
        return weakref_proxy(self)
GameEndCallback_swigregister = _halite.GameEndCallback_swigregister
GameEndCallback_swigregister(GameEndCallback)
cvar = _halite.cvar

class TimeoutCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeoutCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeoutCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _halite.delete_TimeoutCallback
    __del__ = lambda self: None

    def run(self, playerTag, playerName):
        return _halite.TimeoutCallback_run(self, playerTag, playerName)

    def __init__(self):
        if self.__class__ == TimeoutCallback:
            _self = None
        else:
            _self = self
        this = _halite.new_TimeoutCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _halite.disown_TimeoutCallback(self)
        return weakref_proxy(self)
TimeoutCallback_swigregister = _halite.TimeoutCallback_swigregister
TimeoutCallback_swigregister(TimeoutCallback)

class UniConnectionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniConnectionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UniConnectionVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _halite.UniConnectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _halite.UniConnectionVector___nonzero__(self)

    def __bool__(self):
        return _halite.UniConnectionVector___bool__(self)

    def __len__(self):
        return _halite.UniConnectionVector___len__(self)

    def __getslice__(self, i, j):
        return _halite.UniConnectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _halite.UniConnectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _halite.UniConnectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _halite.UniConnectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _halite.UniConnectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _halite.UniConnectionVector___setitem__(self, *args)

    def pop(self):
        return _halite.UniConnectionVector_pop(self)

    def append(self, x):
        return _halite.UniConnectionVector_append(self, x)

    def empty(self):
        return _halite.UniConnectionVector_empty(self)

    def size(self):
        return _halite.UniConnectionVector_size(self)

    def swap(self, v):
        return _halite.UniConnectionVector_swap(self, v)

    def begin(self):
        return _halite.UniConnectionVector_begin(self)

    def end(self):
        return _halite.UniConnectionVector_end(self)

    def rbegin(self):
        return _halite.UniConnectionVector_rbegin(self)

    def rend(self):
        return _halite.UniConnectionVector_rend(self)

    def clear(self):
        return _halite.UniConnectionVector_clear(self)

    def get_allocator(self):
        return _halite.UniConnectionVector_get_allocator(self)

    def pop_back(self):
        return _halite.UniConnectionVector_pop_back(self)

    def erase(self, *args):
        return _halite.UniConnectionVector_erase(self, *args)

    def __init__(self, *args):
        this = _halite.new_UniConnectionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _halite.UniConnectionVector_push_back(self, x)

    def front(self):
        return _halite.UniConnectionVector_front(self)

    def back(self):
        return _halite.UniConnectionVector_back(self)

    def assign(self, n, x):
        return _halite.UniConnectionVector_assign(self, n, x)

    def resize(self, *args):
        return _halite.UniConnectionVector_resize(self, *args)

    def insert(self, *args):
        return _halite.UniConnectionVector_insert(self, *args)

    def reserve(self, n):
        return _halite.UniConnectionVector_reserve(self, n)

    def capacity(self):
        return _halite.UniConnectionVector_capacity(self)
    __swig_destroy__ = _halite.delete_UniConnectionVector
    __del__ = lambda self: None
UniConnectionVector_swigregister = _halite.UniConnectionVector_swigregister
UniConnectionVector_swigregister(UniConnectionVector)

# This file is compatible with both classic and new-style classes.


